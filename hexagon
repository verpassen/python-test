import numpy as np
from scipy import pi,sin,cos,tan,arcsin,arccos,arctan
from math import sqrt
import matplotlib.pyplot as plt
import matplotlib.patches as patches

n  =  8  # 
R  = 40  # Radius of the fillet
B  = 87  # Radius of the incircle
L  = 130 # tool length
L_B = 50 # boundary of the spindle movement
S = B/cos(pi/n) 
r2 = R/B*S
#print('S: %f , R:%f , r2:%f' % (S,R,r2))

Upper_phi = arccos(R/r2)
Upper_the = arctan(R*sin(Upper_phi)/(S-r2*sin(Upper_phi)**2))

the = np.linspace(0,2*pi/n,360)
phi = np.linspace(0,2*pi,360)
X,Y,S_x,S_y=[],[],[],[]
P_x,P_y,D_p=[],[],[]

for k in range(len(the)):
	if the[k] < Upper_the:
		a = 1 + tan(the[k])**2
		b = -2*(S-r2)
		c = (S-r2+R)*(S-r2-R)
		X.append((-b+sqrt(b**2-4*a*c))/2/a)
		Y.append(tan(the[k])*X[k])
	elif (max(the)-Upper_the)<=the[k]:
		a = 1 + tan(the[k])**2
		b = -2*(S-r2)*(cos(2*pi/n)+sin(2*pi/n)*tan(the[k]))
		c = (S-r2)**2-R**2
		X.append((-b+sqrt(b**2-4*a*c))/2/a)
		Y.append(tan(the[k])*X[k])
	else:
		X.append(S/(1+tan(the[k])*tan(pi/n)))
		Y.append(tan(the[k])*X[k])
		
fig = plt.figure(1)
ax = fig.add_subplot(111,aspect='equal')
ax.add_patch(patches.Circle((0,0),B,fill=False))
ax.add_patch(patches.Circle((0,0),L_B,fill=False,edgecolor='red',linestyle='dashed'))
for i in range(n):
	ang = i*2*pi/n
	M = np.matrix([[cos(ang),-sin(ang),0],[sin(ang),cos(ang),0],[0,0,1]])
	for k in range(len(the)):
		tmp = np.dot(M,np.array([X[k],Y[k],1]))
		P_x.append(tmp[0,0])
		P_y.append(tmp[0,1])
		D_p.append(sqrt(tmp[0,0]**2+tmp[0,1]**2))

#print('Px: %f , Py: %f , D_p: %f' % (len(P_x),len(P_y),len(D_p)))		
phi = np.linspace(0,2*pi,n*360)
for i in range(len(phi)):
	P1 = np.array([-L,0,1])
	M12 = np.matrix([[cos(phi[i]),-sin(phi[i]),D_p[i]*cos(phi[i])],[sin(phi[i]),cos(phi[i]),D_p[i]*sin(phi[i])],[0,0,1]])
	P2 = np.dot(M12,P1)
	S_x.append(P2[0,0])
	S_y.append(P2[0,1])
		
plt.plot(P_x,P_y)	
plt.plot(S_x,S_y)	
plt.axis("equal")
plt.grid()
plt.show()
